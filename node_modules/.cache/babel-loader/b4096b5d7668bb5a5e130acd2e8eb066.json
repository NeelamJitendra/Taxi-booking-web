{"ast":null,"code":"var _templateObject = _taggedTemplateLiteralLoose([\"\\n  font-weight: bold;\\n\"], [\"\\n  font-weight: bold;\\n\"]),\n    _templateObject2 = _taggedTemplateLiteralLoose([\"\\n  text-align: left;\\n  width: 100%;\\n\"], [\"\\n  text-align: left;\\n  width: 100%;\\n\"]);\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nvar Match = styled.span(_templateObject);\nvar UpperDiv = styled.div(_templateObject2);\n\nvar Prediction = function Prediction(_ref) {\n  var item = _ref.item;\n  var description = item.description,\n      structured_formatting = item.structured_formatting;\n  var firstMatchedString = structured_formatting && structured_formatting.main_text_matched_substrings.length > 0 && structured_formatting.main_text_matched_substrings[0];\n  var labelParts = null;\n\n  if (firstMatchedString) {\n    labelParts = {\n      before: description.substr(0, firstMatchedString.offset),\n      match: description.substr(firstMatchedString.offset, firstMatchedString.length),\n      after: description.substr(firstMatchedString.offset + firstMatchedString.length)\n    };\n  }\n\n  return React.createElement(UpperDiv, null, labelParts ? React.createElement(\"span\", null, labelParts.before, React.createElement(Match, null, labelParts.match), labelParts.after) : description);\n};\n\nPrediction.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  item: PropTypes.shape({\n    description: PropTypes.string,\n    structured_formatting: PropTypes.shape({\n      main_text_matched_substrings: PropTypes.arrayOf(PropTypes.shape({\n        length: PropTypes.number.isRequired,\n        offset: PropTypes.number.isRequired\n      }))\n    })\n  }).isRequired\n} : {};\nexport default Prediction;","map":{"version":3,"sources":["C:/JITENDRA/Taxi-business-customer/node_modules/react-google-places-suggest/es/components/Prediction/index.js"],"names":["_templateObject","_taggedTemplateLiteralLoose","_templateObject2","strings","raw","PropTypes","React","styled","Match","span","UpperDiv","div","Prediction","_ref","item","description","structured_formatting","firstMatchedString","main_text_matched_substrings","length","labelParts","before","substr","offset","match","after","createElement","propTypes","process","env","NODE_ENV","shape","string","arrayOf","number","isRequired"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,2BAA2B,CAAC,CAAC,0BAAD,CAAD,EAA+B,CAAC,0BAAD,CAA/B,CAAjD;AAAA,IACIC,gBAAgB,GAAGD,2BAA2B,CAAC,CAAC,yCAAD,CAAD,EAA8C,CAAC,yCAAD,CAA9C,CADlD;;AAGA,SAASA,2BAAT,CAAqCE,OAArC,EAA8CC,GAA9C,EAAmD;AAAED,EAAAA,OAAO,CAACC,GAAR,GAAcA,GAAd;AAAmB,SAAOD,OAAP;AAAiB;;AAEzF,OAAOE,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAIC,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAYT,eAAZ,CAAZ;AACA,IAAIU,QAAQ,GAAGH,MAAM,CAACI,GAAP,CAAWT,gBAAX,CAAf;;AAEA,IAAIU,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACzC,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AACA,MAAIC,WAAW,GAAGD,IAAI,CAACC,WAAvB;AAAA,MACIC,qBAAqB,GAAGF,IAAI,CAACE,qBADjC;AAGA,MAAIC,kBAAkB,GAAGD,qBAAqB,IAAIA,qBAAqB,CAACE,4BAAtB,CAAmDC,MAAnD,GAA4D,CAArF,IAA0FH,qBAAqB,CAACE,4BAAtB,CAAmD,CAAnD,CAAnH;AACA,MAAIE,UAAU,GAAG,IAAjB;;AAEA,MAAIH,kBAAJ,EAAwB;AACtBG,IAAAA,UAAU,GAAG;AACXC,MAAAA,MAAM,EAAEN,WAAW,CAACO,MAAZ,CAAmB,CAAnB,EAAsBL,kBAAkB,CAACM,MAAzC,CADG;AAEXC,MAAAA,KAAK,EAAET,WAAW,CAACO,MAAZ,CAAmBL,kBAAkB,CAACM,MAAtC,EAA8CN,kBAAkB,CAACE,MAAjE,CAFI;AAGXM,MAAAA,KAAK,EAAEV,WAAW,CAACO,MAAZ,CAAmBL,kBAAkB,CAACM,MAAnB,GAA4BN,kBAAkB,CAACE,MAAlE;AAHI,KAAb;AAKD;;AAED,SAAOb,KAAK,CAACoB,aAAN,CACLhB,QADK,EAEL,IAFK,EAGLU,UAAU,GAAGd,KAAK,CAACoB,aAAN,CACX,MADW,EAEX,IAFW,EAGXN,UAAU,CAACC,MAHA,EAIXf,KAAK,CAACoB,aAAN,CACElB,KADF,EAEE,IAFF,EAGEY,UAAU,CAACI,KAHb,CAJW,EASXJ,UAAU,CAACK,KATA,CAAH,GAUNV,WAbC,CAAP;AAeD,CA/BD;;AAiCAH,UAAU,CAACe,SAAX,GAAuBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC7DhB,EAAAA,IAAI,EAAET,SAAS,CAAC0B,KAAV,CAAgB;AACpBhB,IAAAA,WAAW,EAAEV,SAAS,CAAC2B,MADH;AAEpBhB,IAAAA,qBAAqB,EAAEX,SAAS,CAAC0B,KAAV,CAAgB;AACrCb,MAAAA,4BAA4B,EAAEb,SAAS,CAAC4B,OAAV,CAAkB5B,SAAS,CAAC0B,KAAV,CAAgB;AAC9DZ,QAAAA,MAAM,EAAEd,SAAS,CAAC6B,MAAV,CAAiBC,UADqC;AAE9DZ,QAAAA,MAAM,EAAElB,SAAS,CAAC6B,MAAV,CAAiBC;AAFqC,OAAhB,CAAlB;AADO,KAAhB;AAFH,GAAhB,EAQHA;AAT0D,CAAxC,GAUnB,EAVJ;AAYA,eAAevB,UAAf","sourcesContent":["var _templateObject = _taggedTemplateLiteralLoose([\"\\n  font-weight: bold;\\n\"], [\"\\n  font-weight: bold;\\n\"]),\n    _templateObject2 = _taggedTemplateLiteralLoose([\"\\n  text-align: left;\\n  width: 100%;\\n\"], [\"\\n  text-align: left;\\n  width: 100%;\\n\"]);\n\nfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nvar Match = styled.span(_templateObject);\nvar UpperDiv = styled.div(_templateObject2);\n\nvar Prediction = function Prediction(_ref) {\n  var item = _ref.item;\n  var description = item.description,\n      structured_formatting = item.structured_formatting;\n\n  var firstMatchedString = structured_formatting && structured_formatting.main_text_matched_substrings.length > 0 && structured_formatting.main_text_matched_substrings[0];\n  var labelParts = null;\n\n  if (firstMatchedString) {\n    labelParts = {\n      before: description.substr(0, firstMatchedString.offset),\n      match: description.substr(firstMatchedString.offset, firstMatchedString.length),\n      after: description.substr(firstMatchedString.offset + firstMatchedString.length)\n    };\n  }\n\n  return React.createElement(\n    UpperDiv,\n    null,\n    labelParts ? React.createElement(\n      \"span\",\n      null,\n      labelParts.before,\n      React.createElement(\n        Match,\n        null,\n        labelParts.match\n      ),\n      labelParts.after\n    ) : description\n  );\n};\n\nPrediction.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  item: PropTypes.shape({\n    description: PropTypes.string,\n    structured_formatting: PropTypes.shape({\n      main_text_matched_substrings: PropTypes.arrayOf(PropTypes.shape({\n        length: PropTypes.number.isRequired,\n        offset: PropTypes.number.isRequired\n      }))\n    })\n  }).isRequired\n} : {};\n\nexport default Prediction;"]},"metadata":{},"sourceType":"module"}