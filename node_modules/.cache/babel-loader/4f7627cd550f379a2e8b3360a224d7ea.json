{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\Taxi-business-customer\\\\src\\\\NewName.js\",\n    _s = $RefreshSig$();\n\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport useOnclickOutside from \"react-cool-onclickoutside\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewName = () => {\n  _s();\n\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300\n  });\n  const ref = useOnclickOutside(() => {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  const handleInput = e => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({\n    description\n  }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter to \"false\"\n    setValue(description, false);\n    clearSuggestions(); // Get latitude and longitude via utility functions\n\n    getGeocode({\n      address: description\n    }).then(results => getLatLng(results[0])).then(({\n      lat,\n      lng\n    }) => {\n      console.log(\"📍 Coordinates: \", {\n        lat,\n        lng\n      });\n    }).catch(error => {\n      console.log(\"😱 Error: \", error);\n    });\n  };\n\n  const renderSuggestions = () => data.map(suggestion => {\n    const {\n      place_id,\n      structured_formatting: {\n        main_text,\n        secondary_text\n      }\n    } = suggestion;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: handleSelect(suggestion),\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: main_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"small\", {\n        children: secondary_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 42\n      }, this)]\n    }, place_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this);\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: handleInput,\n      disabled: !ready,\n      placeholder: \"Where are you going?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), status === \"OK\" && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderSuggestions()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n};\n\n_s(NewName, \"LZ87T8CifYinYLxCcxmOi9iJdIA=\", false, function () {\n  return [usePlacesAutocomplete, useOnclickOutside];\n});\n\n_c = NewName;\nexport default NewName;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewName\");","map":{"version":3,"sources":["C:/JITENDRA/Taxi-business-customer/src/NewName.js"],"names":["usePlacesAutocomplete","getGeocode","getLatLng","useOnclickOutside","NewName","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","debounce","ref","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","catch","error","renderSuggestions","map","suggestion","place_id","structured_formatting","main_text","secondary_text"],"mappings":";;;AAAA,OAAOA,qBAAP,IACIC,UADJ,EAEIC,SAFJ,QAGS,yBAHT;AAIE,OAAOC,iBAAP,MAA8B,2BAA9B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFX,qBAAqB,CAAC;AACxBY,IAAAA,cAAc,EAAE;AACd;AADc,KADQ;AAIxBC,IAAAA,QAAQ,EAAE;AAJc,GAAD,CANzB;AAYA,QAAMC,GAAG,GAAGX,iBAAiB,CAAC,MAAM;AAClC;AACA;AACAQ,IAAAA,gBAAgB;AACjB,GAJ4B,CAA7B;;AAMA,QAAMI,WAAW,GAAIC,CAAD,IAAO;AACzB;AACAN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASX,KAAV,CAAR;AACD,GAHD;;AAKA,QAAMY,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB,MAAM;AAC9C;AACA;AACAT,IAAAA,QAAQ,CAACS,WAAD,EAAc,KAAd,CAAR;AACAR,IAAAA,gBAAgB,GAJ8B,CAM9C;;AACAV,IAAAA,UAAU,CAAC;AAAEmB,MAAAA,OAAO,EAAED;AAAX,KAAD,CAAV,CACGE,IADH,CACSC,OAAD,IAAapB,SAAS,CAACoB,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEGD,IAFH,CAEQ,CAAC;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAkB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC;AAAEH,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAhC;AACD,KAJH,EAKGG,KALH,CAKUC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,KAA1B;AACD,KAPH;AAQD,GAfD;;AAiBA,QAAMC,iBAAiB,GAAG,MACxBpB,IAAI,CAACqB,GAAL,CAAUC,UAAD,IAAgB;AACvB,UAAM;AACJC,MAAAA,QADI;AAEJC,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAFnB,QAGFJ,UAHJ;AAKA,wBACE;AAAmB,MAAA,OAAO,EAAEb,YAAY,CAACa,UAAD,CAAxC;AAAA,8BACE;AAAA,kBAASG;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,oBAC+B;AAAA,kBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,cAD/B;AAAA,OAASH,QAAT;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAXD,CADF;;AAcA,sBACE;AAAK,IAAA,GAAG,EAAElB,GAAV;AAAA,4BACE;AACE,MAAA,KAAK,EAAER,KADT;AAEE,MAAA,QAAQ,EAAES,WAFZ;AAGE,MAAA,QAAQ,EAAE,CAACV,KAHb;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YADF,EAQGG,MAAM,KAAK,IAAX,iBAAmB;AAAA,gBAAKqB,iBAAiB;AAAtB;AAAA;AAAA;AAAA;AAAA,YARtB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAnED;;GAAMzB,O;UAOAJ,qB,EAMQG,iB;;;KAbRC,O;AAqEN,eAAeA,OAAf","sourcesContent":["import usePlacesAutocomplete, {\r\n    getGeocode,\r\n    getLatLng,\r\n  } from \"use-places-autocomplete\";\r\n  import useOnclickOutside from \"react-cool-onclickoutside\";\r\n  \r\n  const NewName = () => {\r\n    const {\r\n      ready,\r\n      value,\r\n      suggestions: { status, data },\r\n      setValue,\r\n      clearSuggestions,\r\n    } = usePlacesAutocomplete({\r\n      requestOptions: {\r\n        /* Define search scope here */\r\n      },\r\n      debounce: 300,\r\n    });\r\n    const ref = useOnclickOutside(() => {\r\n      // When user clicks outside of the component, we can dismiss\r\n      // the searched suggestions by calling this method\r\n      clearSuggestions();\r\n    });\r\n  \r\n    const handleInput = (e) => {\r\n      // Update the keyword of the input element\r\n      setValue(e.target.value);\r\n    };\r\n  \r\n    const handleSelect = ({ description }) => () => {\r\n      // When user selects a place, we can replace the keyword without request data from API\r\n      // by setting the second parameter to \"false\"\r\n      setValue(description, false);\r\n      clearSuggestions();\r\n  \r\n      // Get latitude and longitude via utility functions\r\n      getGeocode({ address: description })\r\n        .then((results) => getLatLng(results[0]))\r\n        .then(({ lat, lng }) => {\r\n          console.log(\"📍 Coordinates: \", { lat, lng });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"😱 Error: \", error);\r\n        });\r\n    };\r\n  \r\n    const renderSuggestions = () =>\r\n      data.map((suggestion) => {\r\n        const {\r\n          place_id,\r\n          structured_formatting: { main_text, secondary_text },\r\n        } = suggestion;\r\n  \r\n        return (\r\n          <li key={place_id} onClick={handleSelect(suggestion)}>\r\n            <strong>{main_text}</strong> <small>{secondary_text}</small>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n    return (\r\n      <div ref={ref}>\r\n        <input\r\n          value={value}\r\n          onChange={handleInput}\r\n          disabled={!ready}\r\n          placeholder=\"Where are you going?\"\r\n        />\r\n        {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\r\n        {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default NewName;"]},"metadata":{},"sourceType":"module"}