{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\bzzt-test\\\\src\\\\NameSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddress(value);\n    setCoordinates(latLng);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: setAddress,\n      onSelect: handleSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Latitude: \", coordinates.lat]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Longitude: \", coordinates.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"From Address\",\n          freeSolo: true,\n          ...getInputProps(),\n          options: suggestions.map(suggestion => suggestion.description),\n          renderInput: suggestion => /*#__PURE__*/_jsxDEV(TextField, { ...getSuggestionItemProps(suggestion, {\n              style\n            }),\n            label: \"From\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            children: suggestion.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          freeSolo: true,\n          id: \"free-solo-2-demo\",\n          disableClearable: true,\n          options: suggestions.map(suggestion => {\n            const style = {\n              backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this);\n          }),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Search input\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            InputProps: { ...params.InputProps,\n              type: 'search'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n            placeholder: \"Type address\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"...loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 26\n          }, this) : null, suggestions.map(suggestion => {\n            const style = {\n              backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3tfHOfFsCQ5buIs4iWYNpuYfm3o=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/JITENDRA/bzzt-test/src/NameSearch.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","TextField","Autocomplete","App","address","setAddress","useState","coordinates","setCoordinates","lat","lng","handleSelect","value","results","latLng","getInputProps","suggestions","getSuggestionItemProps","loading","map","suggestion","description","style","backgroundColor","active","params","InputProps","type","placeholder"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng\r\n} from \"react-places-autocomplete\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function App() {\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null\r\n  });\r\n\r\n  const handleSelect = async value => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PlacesAutocomplete\r\n        value={address}\r\n        onChange={setAddress}\r\n        onSelect={handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <p>Latitude: {coordinates.lat}</p>\r\n            <p>Longitude: {coordinates.lng}</p>\r\n\r\n            <Autocomplete\r\n        id=\"From Address\"\r\n        freeSolo\r\n        {...getInputProps()}\r\n        options={suggestions.map((suggestion) => suggestion.description)}\r\n        renderInput={(suggestion) => (\r\n          <TextField {...getSuggestionItemProps(suggestion, { style })} label=\"From\" margin=\"normal\" variant=\"outlined\">\r\n              {suggestion.description}\r\n          </TextField>\r\n        )}\r\n      />\r\n\r\n      \r\n<Autocomplete\r\n        freeSolo\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={suggestions.map((suggestion) => {\r\n            const style = {\r\n              backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\r\n            };\r\n\r\n            return (\r\n              <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                {suggestion.description}\r\n              </div>\r\n            );\r\n          })}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Search input\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            InputProps={{ ...params.InputProps, type: 'search' }}\r\n          />\r\n        )}\r\n      />\r\n\r\n\r\n            <input {...getInputProps({ placeholder: \"Type address\" })} />\r\n\r\n            <div>\r\n              {loading ? <div>...loading</div> : null}\r\n\r\n              {suggestions.map(suggestion => {\r\n                const style = {\r\n                  backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\r\n                };\r\n\r\n                return (\r\n                  <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                    {suggestion.description}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}