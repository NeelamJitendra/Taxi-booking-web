{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\Taxi-business-customer\\\\src\\\\NameSearch.js\";\nimport React, { Component } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class NameSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadGoogleMaps = callback => {\n      const existingScript = document.getElementById(\"googlePlacesScript\");\n\n      if (!existingScript) {\n        const script = document.createElement(\"script\");\n        script.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAnjGimBr-RVx2HyMgWCGSfKehHC5j3vTE&libraries=places\";\n        script.id = \"googleMaps\";\n        document.body.appendChild(script); //action to do after a script is loaded in our case setState\n\n        script.onload = () => {\n          if (callback) callback();\n        };\n      }\n\n      if (existingScript && callback) callback();\n    };\n\n    this.unloadGoogleMaps = () => {\n      let googlePlacesScript = document.getElementById(\"googlePlacesScript\");\n\n      if (googlePlacesScript) {\n        googlePlacesScript.remove();\n      }\n    };\n\n    this.handleSelect = async value => {\n      const results = await geocodeByAddress(value);\n      const latLng = await getLatLng(results[0]);\n      this.setState({\n        address: value\n      }, () => {\n        this.props.setCoordinates(latLng);\n      });\n    };\n\n    this.state = {\n      googleMapsReady: false,\n      address: \"\",\n      coordinates: {\n        lat: null,\n        lng: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    //script is loaded here and state is set to true after loading\n    this.loadGoogleMaps(() => {\n      // Work to do after the library loads.\n      this.setState({\n        googleMapsReady: true\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    // unload script when needed to avoid multiple google scripts loaded warning\n    this.unloadGoogleMaps();\n  }\n\n  render() {\n    let address = this.state.address;\n    let type = this.props.type;\n    const searchOptions = {\n      componentRestrictions: {\n        country: ['swe']\n      }\n    };\n\n    if (!this.state.googleMapsReady) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-field\",\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: e => this.setState({\n          address: e\n        }),\n        onSelect: this.handleSelect,\n        searchOptions: searchOptions,\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(TextField, { ...getInputProps({\n              placeholder: \"Type address\"\n            }),\n            type: \"text\",\n            label: type,\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"...loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 28\n            }, this) : null, suggestions.map(suggestion => {\n              const style = {\n                backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\",\n                maxWidth: '200px'\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default NameSearch;","map":{"version":3,"sources":["C:/JITENDRA/Taxi-business-customer/src/NameSearch.js"],"names":["React","Component","PlacesAutocomplete","geocodeByAddress","getLatLng","TextField","NameSearch","constructor","props","loadGoogleMaps","callback","existingScript","document","getElementById","script","createElement","src","id","body","appendChild","onload","unloadGoogleMaps","googlePlacesScript","remove","handleSelect","value","results","latLng","setState","address","setCoordinates","state","googleMapsReady","coordinates","lat","lng","componentDidMount","componentWillUnmount","render","type","searchOptions","componentRestrictions","country","e","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","maxWidth","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng\r\n} from \"react-places-autocomplete\";\r\nimport './App.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './App.css';\r\n\r\nexport class NameSearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      googleMapsReady: false,\r\n      address: \"\",\r\n      coordinates: {\r\n        lat: null,\r\n        lng: null\r\n      }\r\n    };\r\n  }\r\n\r\n  \r\ncomponentDidMount() {\r\n  //script is loaded here and state is set to true after loading\r\n  this.loadGoogleMaps(() => {\r\n  // Work to do after the library loads.\r\n  this.setState({ googleMapsReady: true });\r\n});\r\n}\r\n\r\ncomponentWillUnmount() {\r\n// unload script when needed to avoid multiple google scripts loaded warning\r\nthis.unloadGoogleMaps();\r\n}\r\n\r\nloadGoogleMaps = callback => {\r\n  const existingScript = document.getElementById(\"googlePlacesScript\");\r\n  if (!existingScript) {\r\n      const script = document.createElement(\"script\");\r\n      script.src =\r\n          \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAnjGimBr-RVx2HyMgWCGSfKehHC5j3vTE&libraries=places\";\r\n      script.id = \"googleMaps\";\r\n      document.body.appendChild(script);\r\n      //action to do after a script is loaded in our case setState\r\n      script.onload = () => {\r\n          if (callback) callback();\r\n      };\r\n  }\r\n  if (existingScript && callback) callback();\r\n};\r\n\r\nunloadGoogleMaps = () => {\r\n  let googlePlacesScript = document.getElementById(\"googlePlacesScript\");\r\n  if (googlePlacesScript) {\r\n      googlePlacesScript.remove();\r\n  }\r\n};\r\n\r\n  handleSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n\r\n    this.setState({\r\n      address: value\r\n    }, () => {\r\n      this.props.setCoordinates(latLng);\r\n    })\r\n\r\n  };\r\n\r\n  render() {\r\n    let address = this.state.address;\r\n    let type = this.props.type;\r\n    const searchOptions = {\r\n      componentRestrictions: { country: ['swe'] }\r\n    }\r\n    if (!this.state.googleMapsReady) {\r\n      return <p>Loading</p>;\r\n  }\r\n    return (\r\n      <div className='text-field' >\r\n        <PlacesAutocomplete\r\n          value={address}\r\n          onChange={e => this.setState({ address: e })}\r\n          onSelect={this.handleSelect}\r\n          searchOptions={searchOptions}\r\n        >\r\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n            <div>\r\n              <TextField {...getInputProps({ placeholder: \"Type address\" })} type='text' label={type} variant=\"outlined\" />\r\n\r\n              <div>\r\n                {loading ? <div>...loading</div> : null}\r\n\r\n                {suggestions.map(suggestion => {\r\n                  const style = {\r\n                    backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\",\r\n                    maxWidth: '200px'\r\n                  };\r\n\r\n                  return (\r\n                    <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                      {suggestion.description}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </PlacesAutocomplete>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default NameSearch;"]},"metadata":{},"sourceType":"module"}