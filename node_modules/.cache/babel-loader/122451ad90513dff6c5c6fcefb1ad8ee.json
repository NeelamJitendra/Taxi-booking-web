{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\Taxi-business-customer\\\\src\\\\NewName.js\";\nimport Autocomplete from 'react-google-autocomplete';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Map extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        style: {\n          width: '100%',\n          height: '40px',\n          paddingLeft: '16px',\n          marginTop: '2px',\n          marginBottom: '100px'\n        },\n        onPlaceSelected: this.onPlaceSelected,\n        types: ['(regions)']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 1\n    }, this);\n  }\n\n}\nexport default Map;","map":{"version":3,"sources":["C:/JITENDRA/Taxi-business-customer/src/NewName.js"],"names":["Autocomplete","React","Component","Map","onPlaceSelected","place","address","formatted_address","addressArray","address_components","city","getCity","area","getArea","state","getState","latValue","geometry","location","lat","lngValue","lng","setState","markerPosition","mapPosition","render","width","height","paddingLeft","marginTop","marginBottom"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,OAAO,MAAOC,GAAP,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;;AAAA,SAKnCE,eALmC,GAKfC,KAAF,IAAa;AAChC,YAAMC,OAAO,GAAGD,KAAK,CAACE,iBAAtB;AAAA,YACGC,YAAY,GAAIH,KAAK,CAACI,kBADzB;AAAA,YAEGC,IAAI,GAAG,KAAKC,OAAL,CAAcH,YAAd,CAFV;AAAA,YAGGI,IAAI,GAAG,KAAKC,OAAL,CAAcL,YAAd,CAHV;AAAA,YAIGM,KAAK,GAAG,KAAKC,QAAL,CAAeP,YAAf,CAJX;AAAA,YAKGQ,QAAQ,GAAGX,KAAK,CAACY,QAAN,CAAeC,QAAf,CAAwBC,GAAxB,EALd;AAAA,YAMGC,QAAQ,GAAGf,KAAK,CAACY,QAAN,CAAeC,QAAf,CAAwBG,GAAxB,EANd,CADgC,CAQhC;;AACE,WAAKC,QAAL,CAAc;AACbhB,QAAAA,OAAO,EAAIA,OAAF,GAAcA,OAAd,GAAwB,EADpB;AAEbM,QAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAFX;AAGbF,QAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAHX;AAIbI,QAAAA,KAAK,EAAIA,KAAF,GAAYA,KAAZ,GAAoB,EAJd;AAKbS,QAAAA,cAAc,EAAE;AACfJ,UAAAA,GAAG,EAAEH,QADU;AAEfK,UAAAA,GAAG,EAAED;AAFU,SALH;AASbI,QAAAA,WAAW,EAAE;AACZL,UAAAA,GAAG,EAAEH,QADO;AAEZK,UAAAA,GAAG,EAAED;AAFO;AATA,OAAd;AAcA,KA5BkC;AAAA;;AA6BpCK,EAAAA,MAAM,GAAE;AACR,wBACA;AAAA,6BACM,QAAC,YAAD;AACC,QAAA,KAAK,EAAE;AACNC,UAAAA,KAAK,EAAE,MADD;AAENC,UAAAA,MAAM,EAAE,MAFF;AAGNC,UAAAA,WAAW,EAAE,MAHP;AAINC,UAAAA,SAAS,EAAE,KAJL;AAKNC,UAAAA,YAAY,EAAE;AALR,SADR;AAQC,QAAA,eAAe,EAAG,KAAK1B,eARxB;AASC,QAAA,KAAK,EAAE,CAAC,WAAD;AATR;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,YADA;AAeC;;AA7CmC;AA+CpC,eAAeD,GAAf","sourcesContent":["import Autocomplete from 'react-google-autocomplete';\r\nimport React, { Component } from \"react\";\r\nexport class  Map extends Component {\r\n /**\r\n  * When the user types an address in the search box\r\n  * @param place\r\n  */\r\n onPlaceSelected = ( place ) => {\r\nconst address = place.formatted_address,\r\n   addressArray =  place.address_components,\r\n   city = this.getCity( addressArray ),\r\n   area = this.getArea( addressArray ),\r\n   state = this.getState( addressArray ),\r\n   latValue = place.geometry.location.lat(),\r\n   lngValue = place.geometry.location.lng();\r\n// Set these values in the state.\r\n  this.setState({\r\n   address: ( address ) ? address : '',\r\n   area: ( area ) ? area : '',\r\n   city: ( city ) ? city : '',\r\n   state: ( state ) ? state : '',\r\n   markerPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n   mapPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n  })\r\n };\r\nrender(){\r\nreturn(\r\n<div>\r\n      <Autocomplete\r\n       style={{\r\n        width: '100%',\r\n        height: '40px',\r\n        paddingLeft: '16px',\r\n        marginTop: '2px',\r\n        marginBottom: '100px'\r\n       }}\r\n       onPlaceSelected={ this.onPlaceSelected }\r\n       types={['(regions)']}\r\n      />\r\n</div>\r\n)\r\n}\r\n}\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}