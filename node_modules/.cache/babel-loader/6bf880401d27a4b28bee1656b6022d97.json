{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\bzzt-test\\\\src\\\\RideStatus.js\";\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class RideStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidUpdate = prevProps => {\n      if (prevProps.BookRes !== this.props.BookResS) {\n        console.log('cardloaded', this.props.BookRes);\n        let rideStatusBody = {\n          \"reference\": this.props.BookRes.reference\n        };\n        fetch('https://test.bzzt.se/api/external/ride_status', {\n          method: 'POST',\n          headers: {\n            'Authorization': 'Bearer 0E919FC4E1A356007719337034B72C2750FFB388FFF8DF5C1C68536D0A8B8BBB',\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(rideStatusBody)\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            response.text().then(text => {\n              const error = JSON.parse(text);\n              throw alert(error.message);\n            });\n          }\n        }).then(data => {\n          if (data !== undefined) {\n            this.setState({\n              rideStatus: data\n            });\n            console.log('date is:', data);\n          }\n        });\n      } else {\n        console.log('cardloaded not ', this.props.BookRes);\n      }\n    };\n\n    this.state = {\n      rideStatus: {}\n    };\n  }\n\n  render() {\n    let BookRes = this.props.BookRes;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h2\",\n          children: [\"Refrence: \", BookRes !== null ? BookRes.reference : 'Not booked']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\",\n          children: [\"ETA:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this), \"Ride Status:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          component: \"p\",\n          children: [\"Ride State:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this), \"Estimated Fare:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          children: \"Cancel Ride\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this);\n  }\n\n}\nexport default RideStatus;","map":{"version":3,"sources":["C:/JITENDRA/bzzt-test/src/RideStatus.js"],"names":["React","Component","Card","CardActions","CardContent","Button","Typography","RideStatus","constructor","props","componentDidUpdate","prevProps","BookRes","BookResS","console","log","rideStatusBody","reference","fetch","method","headers","body","JSON","stringify","then","response","ok","json","text","error","parse","alert","message","data","undefined","setState","rideStatus","state","render"],"mappings":"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","sourcesContent":["import React ,{Component}from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport class RideStatus extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n    this.state = {\r\n      rideStatus:{}\r\n    };\r\n  }\r\n  componentDidUpdate= (prevProps) =>{\r\n    if (prevProps.BookRes !== this.props.BookResS) {\r\n      console.log('cardloaded', this.props.BookRes)\r\n      let rideStatusBody = {\r\n        \"reference\": this.props.BookRes.reference\r\n      };\r\n  \r\n      fetch('https://test.bzzt.se/api/external/ride_status', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': 'Bearer 0E919FC4E1A356007719337034B72C2750FFB388FFF8DF5C1C68536D0A8B8BBB',\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(rideStatusBody),\r\n      })\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json()\r\n          } else {\r\n            response.text().then(text => {\r\n  \r\n              const error = JSON.parse(text);\r\n              throw alert(error.message)\r\n            })\r\n          }\r\n        })\r\n        .then(data => {\r\n          if (data !== undefined) {\r\n            this.setState({ rideStatus: data})\r\n            console.log('date is:', data)\r\n          }\r\n        })\r\n    }\r\n    else{\r\n      \r\n      console.log('cardloaded not ', this.props.BookRes)\r\n    }\r\n  }\r\n  render(){\r\n    let BookRes=this.props.BookRes;\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Refrence: {BookRes !== null ?  BookRes.reference : 'Not booked'}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">\r\n          ETA: \r\n          <br/>\r\n          Ride Status: \r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Ride State:\r\n          <br />\r\n          Estimated Fare:\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Cancel Ride</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default RideStatus;"]},"metadata":{},"sourceType":"module"}