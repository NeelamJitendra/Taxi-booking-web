{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\bzzt-test\\\\src\\\\NameSearch.js\";\nimport React, { Component } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport './App.css';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Visibility from '@material-ui/icons/MyLocation';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    width: '25ch'\n  }\n});\n\nexport class NameSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelect = async value => {\n      const results = await geocodeByAddress(value);\n      const latLng = await getLatLng(results[0]);\n      this.setState({\n        address: value,\n        coordinates: latLng\n      }, () => {\n        this.props.setCoordinates(this.state.coordinates);\n      });\n    };\n\n    this.getLocation = () => {\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(pos => {\n            const coords = pos.coords;\n            this.setState({\n              coordinates: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            }, console.log(this.state.coordinates));\n          });\n        }\n      }\n    };\n\n    this.state = {\n      address: \"\",\n      coordinates: {\n        lat: null,\n        lng: null\n      }\n    };\n  }\n\n  render() {\n    let address = this.state.address;\n    let type = this.props.type;\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: e => this.setState({\n          address: e\n        }),\n        onSelect: this.handleSelect,\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            className: clsx(classes.margin, classes.textField),\n            variant: \"outlined\",\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"outlined-adornment\",\n              children: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              id: \"outlined-adornment\",\n              type: 'text',\n              ...getInputProps({\n                placeholder: \"Type address\"\n              }),\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  \"aria-label\": \"toggle location visibility\",\n                  edge: \"end\",\n                  onClick: console.log('click'),\n                  children: /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 50\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 41\n              }, this),\n              labelWidth: 70\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"...loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 44\n            }, this) : null, suggestions.map(suggestion => {\n              const style = {\n                backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 41\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default withStyles(styles)(NameSearch);","map":{"version":3,"sources":["C:/JITENDRA/bzzt-test/src/NameSearch.js"],"names":["React","Component","PlacesAutocomplete","geocodeByAddress","getLatLng","clsx","withStyles","Visibility","IconButton","OutlinedInput","InputLabel","InputAdornment","FormControl","styles","theme","margin","spacing","textField","width","NameSearch","constructor","props","handleSelect","value","results","latLng","setState","address","coordinates","setCoordinates","state","getLocation","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","console","log","render","type","classes","e","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng\r\n} from \"react-places-autocomplete\";\r\nimport './App.css';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Visibility from '@material-ui/icons/MyLocation';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst styles = (theme) => ({\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    textField: {\r\n      width: '25ch',\r\n    },\r\n  });\r\n\r\nexport class NameSearch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            address: \"\",\r\n            coordinates: {\r\n                lat: null,\r\n                lng: null\r\n            }\r\n        };\r\n    }\r\n\r\n    handleSelect = async (value) => {\r\n        const results = await geocodeByAddress(value);\r\n        const latLng = await getLatLng(results[0]);\r\n\r\n        this.setState({\r\n            address: value,\r\n            coordinates: latLng\r\n        }, () => {\r\n            this.props.setCoordinates(this.state.coordinates);\r\n        })\r\n\r\n    };\r\n\r\n    \r\n    getLocation=()=> {\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n          const coords = pos.coords;\r\n          this.setState({\r\n            coordinates: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude\r\n            }\r\n          }, console.log(this.state.coordinates));\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n    render() {\r\n        let address = this.state.address;\r\n        let type = this.props.type;\r\n        const {classes} = this.props;\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <PlacesAutocomplete\r\n                    value={address}\r\n                    onChange={e => this.setState({ address: e })}\r\n                    onSelect={this.handleSelect}\r\n                >\r\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                        <div>\r\n\r\n                            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                                <InputLabel htmlFor=\"outlined-adornment\">{type}</InputLabel>\r\n                                <OutlinedInput\r\n                                    id=\"outlined-adornment\"\r\n                                    type={'text'}\r\n                                    {...getInputProps({ placeholder: \"Type address\" })}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle location visibility\"\r\n                                                edge=\"end\"\r\n                                                onClick={console.log('click')}\r\n                                            >\r\n                                                {<Visibility />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    labelWidth={70}\r\n                                />\r\n                            </FormControl>\r\n\r\n                            <div>\r\n                                {loading ? <div>...loading</div> : null}\r\n\r\n                                {suggestions.map(suggestion => {\r\n                                    const style = {\r\n                                        backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\r\n                                    };\r\n\r\n                                    return (\r\n                                        <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                                            {suggestion.description}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </PlacesAutocomplete>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(NameSearch);"]},"metadata":{},"sourceType":"module"}