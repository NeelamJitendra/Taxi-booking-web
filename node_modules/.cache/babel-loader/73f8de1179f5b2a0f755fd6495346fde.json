{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\bzzt-test\\\\src\\\\Map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLocation: {\n        lat: 59.3293,\n        lng: 18.0686\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = 14;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      });\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return /*#__PURE__*/React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: \"map\",\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), this.renderChildren()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }, this);\n  }\n\n}\nexport default CurrentLocation;","map":{"version":3,"sources":["C:/JITENDRA/bzzt-test/src/Map.js"],"names":["React","ReactDOM","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","state","currentLocation","lat","lng","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","componentDidUpdate","prevProps","prevState","google","recenterMap","current","maps","center","LatLng","panTo","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","style"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst mapStyles = {\r\n  map: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%'\r\n  }\r\n};\r\n\r\nexport class CurrentLocation extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n    \r\n        this.state = {\r\n          currentLocation: {\r\n            lat: 59.3293,\r\n            lng: 18.0686\r\n          }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.centerAroundCurrentLocation) {\r\n          if (navigator && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(pos => {\r\n              const coords = pos.coords;\r\n              this.setState({\r\n                currentLocation: {\r\n                  lat: coords.latitude,\r\n                  lng: coords.longitude\r\n                }\r\n              });\r\n            });\r\n          }\r\n        }\r\n        this.loadMap();\r\n      }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.google !== this.props.google) {\r\n          this.loadMap();\r\n        }\r\n        if (prevState.currentLocation !== this.state.currentLocation) {\r\n          this.recenterMap();\r\n        }\r\n    }\r\n\r\n    recenterMap() {\r\n        const map = this.map;\r\n        const current = this.state.currentLocation;\r\n        const google = this.props.google;\r\n        const maps = google.maps;\r\n    \r\n        if (map) {\r\n          let center = new maps.LatLng(current.lat, current.lng);\r\n          map.panTo(center);\r\n        }\r\n      }      \r\n\r\n      loadMap() {\r\n        if (this.props && this.props.google) {\r\n            \r\n          const { google } = this.props;\r\n          const maps = google.maps;\r\n    \r\n          const mapRef = this.refs.map;\r\n    \r\n          const node = ReactDOM.findDOMNode(mapRef);\r\n    \r\n          let zoom  = 14;\r\n          const { lat, lng } = this.state.currentLocation;\r\n          const center = new maps.LatLng(lat, lng);\r\n    \r\n          const mapConfig = Object.assign(\r\n            {},\r\n            {\r\n              center: center,\r\n              zoom: zoom\r\n            }\r\n          );\r\n\r\n          this.map = new maps.Map(node, mapConfig);\r\n        }\r\n      }\r\n\r\n      renderChildren() {\r\n        const { children } = this.props;\r\n    \r\n        if (!children) return;\r\n    \r\n        return React.Children.map(children, c => {\r\n          if (!c) return;\r\n    \r\n          return React.cloneElement(c, {\r\n            map: this.map,\r\n            google: this.props.google,\r\n            mapCenter: this.state.currentLocation\r\n          });\r\n        });\r\n      }\r\n\r\n      render() {\r\n        const style = Object.assign({}, mapStyles.map);\r\n    \r\n        return (\r\n          <div>\r\n            <div ref=\"map\">\r\n              Loading map...\r\n            </div>\r\n            {this.renderChildren()}\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default CurrentLocation;"]},"metadata":{},"sourceType":"module"}