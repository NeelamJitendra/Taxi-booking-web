{"ast":null,"code":"var _jsxFileName = \"C:\\\\JITENDRA\\\\bzzt-test\\\\src\\\\RideStatus.js\";\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class RideStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.BookRes === this.props.BookRes) {\n        console.log('data not updated');\n      } else {\n        this.getStatus();\n      }\n    };\n\n    this.getStatus = () => {\n      let rideStatusBody = {\n        \"reference\": this.props.BookRes.reference\n      };\n      fetch('https://test.bzzt.se/api/external/ride_status', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer 0E919FC4E1A356007719337034B72C2750FFB388FFF8DF5C1C68536D0A8B8BBB',\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(rideStatusBody)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          response.text().then(text => {\n            const error = JSON.parse(text);\n            throw alert(error.message);\n          });\n        }\n      }).then(data => {\n        if (data !== undefined) {\n          if (data.status === 'accepted') {\n            this.setState({\n              rideStatus: data,\n              ETA: data.eta.destination.dynamic,\n              RideState: data.ride.state\n            });\n          } else {\n            this.setState({\n              rideStatus: data\n            });\n          }\n        }\n      });\n    };\n\n    this.cancelRide = () => {\n      let rideStatusBody = {\n        \"reference\": this.props.BookRes.reference\n      };\n      fetch('https://test.bzzt.se/api/external/cancel_ride', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer 0E919FC4E1A356007719337034B72C2750FFB388FFF8DF5C1C68536D0A8B8BBB',\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(rideStatusBody)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          response.text().then(text => {\n            const error = JSON.parse(text);\n            throw alert(error.message);\n          });\n        }\n      }).then(data => {\n        if (data !== undefined) {\n          let cancelled = data.cancelled ? 'Ride cancelled' : 'Ride not cancelled';\n          this.setState({\n            rideStatus: '',\n            ETA: '',\n            RideState: ''\n          }, () => alert(cancelled));\n        }\n      });\n    };\n\n    this.state = {\n      rideStatus: {},\n      ETA: '',\n      RideState: ''\n    };\n  }\n\n  render() {\n    let BookRes = this.props.BookRes;\n    let rideStatus = this.state.rideStatus;\n    let ETA = this.state.ETA;\n    let RideState = this.state.RideState;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h2\",\n          children: [\"Refrence: \", BookRes !== null ? BookRes.reference : 'Not booked', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), \"Ride Status: \", rideStatus !== null ? rideStatus.status : 'Not booked']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\",\n          children: [\"ETA: \", ETA !== '' ? ETA : 'Not booked']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          component: \"p\",\n          children: [\"Ride State: \", RideState !== '' ? RideState : 'Not booked', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this), \"Estimated Fare: \", rideStatus !== null ? rideStatus.estimatedFare : 'Not booked']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          onClick: () => this.cancelRide(),\n          children: \"Cancel Ride\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this);\n  }\n\n}\nexport default RideStatus;","map":{"version":3,"sources":["C:/JITENDRA/bzzt-test/src/RideStatus.js"],"names":["React","Component","Card","CardActions","CardContent","Button","Typography","RideStatus","constructor","props","componentDidUpdate","prevProps","prevState","BookRes","console","log","getStatus","rideStatusBody","reference","fetch","method","headers","body","JSON","stringify","then","response","ok","json","text","error","parse","alert","message","data","undefined","status","setState","rideStatus","ETA","eta","destination","dynamic","RideState","ride","state","cancelRide","cancelled","render","estimatedFare"],"mappings":"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","sourcesContent":["import React ,{Component}from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport class RideStatus extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n    this.state = {\r\n      rideStatus:{},\r\n      ETA: '',\r\n      RideState:''\r\n    };\r\n  }\r\n  componentDidUpdate= (prevProps, prevState) =>{\r\n    \r\n    if (prevProps.BookRes === this.props.BookRes) {\r\n      console.log('data not updated')\r\n    }\r\n    else{\r\n      this.getStatus()\r\n    }\r\n  }\r\n\r\n  getStatus=()=>{\r\n      let rideStatusBody = {\r\n        \"reference\": this.props.BookRes.reference\r\n      };\r\n  \r\n      fetch('https://test.bzzt.se/api/external/ride_status', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': 'Bearer 0E919FC4E1A356007719337034B72C2750FFB388FFF8DF5C1C68536D0A8B8BBB',\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(rideStatusBody),\r\n      })\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json()\r\n          } else {\r\n            response.text().then(text => {\r\n  \r\n              const error = JSON.parse(text);\r\n              throw alert(error.message)\r\n            })\r\n          }\r\n        })\r\n        .then(data => {\r\n          if (data !== undefined) {\r\n            if(data.status === 'accepted'){\r\n              this.setState({ rideStatus: data, \r\n                ETA: data.eta.destination.dynamic,\r\n                RideState: data.ride.state})\r\n            }\r\n            else{\r\n              this.setState({ rideStatus: data})\r\n            }\r\n          }\r\n        })\r\n  }\r\n\r\n  cancelRide= ()=>{\r\n    let rideStatusBody = {\r\n      \"reference\": this.props.BookRes.reference\r\n    };\r\n\r\n    fetch('https://test.bzzt.se/api/external/cancel_ride', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': 'Bearer 0E919FC4E1A356007719337034B72C2750FFB388FFF8DF5C1C68536D0A8B8BBB',\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(rideStatusBody),\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json()\r\n        } else {\r\n          response.text().then(text => {\r\n\r\n            const error = JSON.parse(text);\r\n            throw alert(error.message)\r\n          })\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data !== undefined) {\r\n          let cancelled = data.cancelled ? 'Ride cancelled' : 'Ride not cancelled'\r\n            this.setState({ rideStatus: '', \r\n              ETA: '',\r\n              RideState: ''},\r\n              ()=>alert(cancelled))\r\n        }\r\n      })\r\n  }\r\n  render(){\r\n    let BookRes=this.props.BookRes;\r\n    let rideStatus= this.state.rideStatus;\r\n    let ETA = this.state.ETA;\r\n    let RideState = this.state.RideState;\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Refrence: {BookRes !== null ?  BookRes.reference : 'Not booked'}\r\n          <br/>\r\n          Ride Status: {rideStatus !== null ?  rideStatus.status : 'Not booked' }\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">\r\n          ETA: {ETA !== '' ? ETA : 'Not booked' }\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Ride State: {RideState !== '' ?  RideState : 'Not booked' }\r\n          <br />\r\n          Estimated Fare: {rideStatus !== null ?  rideStatus.estimatedFare : 'Not booked' }\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\" onClick={()=> this.cancelRide()}>Cancel Ride</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default RideStatus;"]},"metadata":{},"sourceType":"module"}